#!/usr/bin/env bash

token="" # YOUR TOKEN

print_help() {
    cat <<EOF
Usage: create_repo [OPTIONS]

Create a new GitHub repository.

Options:
  -r, --repo        Repository name (required)
  -d, --description Repository description
  -p, --private     Set repository as private
  -h, --help        Print this help message and exit

EOF
}

repo=""
description=""
private="false"

while [[ $# -gt 0 ]]; do
    case "$1" in
        -r|--repo)
            repo="$2"
            shift 2
            ;;
        -d|--description)
            description="$2"
            shift 2
            ;;
        -p|--private)
            private="true"
            shift
            ;;
        -h|--help)
            print_help
            exit 0
            ;;
        *)
            echo "Unknown option: $1"
            print_help
            exit 1
            ;;
    esac
done

if [ -z "$repo" ]; then
    print_help
    exit 1
fi


if [ -n "$github_token" ]; then
    echo "i am her"
    token="$github_token"
elif [ -z "$token" ]; then
    echo -e "Error: GitHub token not provided.\nSet the github_token environment variable or define the token variable in the script."
    exit 1
fi

response_body=$(curl -s -w '%{header_json}' \
  -X POST \
  -H "Accept: application/vnd.github+json" \
  -H "Authorization: Bearer $token" \
  https://api.github.com/user/repos \
  -d "{\"name\":\"$repo\",\"description\":\"$description\",\"private\":$private}")


if [ "$(echo "$response_body" | jq -r '.message' | head -n 1)" != "null" ]; then
    echo "$response_body" | jq -r 'select(has("message")) | .message, (if has("errors") then .errors[].message else empty end)'
else
    echo $response_body | jq -r 'if has("ssh_url") then .ssh_url else empty end'
    echo $response_body | jq -r 'if has("clone_url") then .clone_url else empty end'
fi



